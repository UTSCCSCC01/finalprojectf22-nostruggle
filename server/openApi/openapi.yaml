openapi: 3.0.3
info:
  title: NoStruggle - OpenAPI 3.0
  description: |-
   NoStruggle - Helping you along your computer science journey
    
    Some useful links:
    - [The NoStruggle repository](https://github.com/UTSCCSCC01/finalprojectf22-nostruggle)
    - [The source AP definition for NoStruggle (coming-soon)](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
  termsOfService: coming-soon.com
  contact:
    email: coming-soon@gmail.com
  license:
    name: n/a
    url: coming-soon.com
  version: 1.0.0
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: https://localhost:2800/api/v1
tags:
  - name: tasks
    description: Add tasks to your todolist
    externalDocs:
      description: Find out more
      url: http://swagger.io
  - name: user
    description: Operations about user
paths:
  /tasks:
    post:
      tags:
        - tasks
      summary: Add a new task to user's schedule
      description: post a new task to user's schedule
      operationId: addTask
      requestBody:
        description: Create a new task
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Task'
          application/xml:
            schema:
              $ref: '#/components/schemas/Task'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Task'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Task'
        '405':
          description: Invalid input
      security:
        - petstore_auth:
            - write:pets
            - read:pets
    get:
      tags:
        - tasks
      summary: Finds Tasks 
      description: Multiple status values can be provided with comma separated strings
      operationId: findTasks
      parameters:
        - name: filters
          in: query
          description: Attributes of the tasks to filter by
          required: false
          explode: true
          schema:
            type: object
            default: {}
            example: { userId: '10', done: true }
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'          
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'
        '400':
          description: Invalid filter keys
      security:
        - petstore_auth:
            - write:pets
            - read:pets
    patch:
      tags:
        - tasks
      summary: Update an existing task
      description: Update an existing task in a schedule
      operationId: updatePet
      requestBody:
        description: Update an existing task in a schedule
        content:
          application/json:
            schema:
              type: object
              example: { filters: { userId: '10', title: "Read chapter 1 of textbook"}, update: { done: true, timespent: 1700 }}
          application/xml:
            schema:
              $ref: '#/components/schemas/Task'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Task'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              example:
                id: '1032432'
                title: Read chapter 1 of textbook
                deadline: '2022-09-05T00:00:00.000+00:00'
                timespent: 1700
                userId: '10'
                done: true
            application/xml:
              schema:
                $ref: '#/components/schemas/Task'
        '400':
          description: Invalid ID supplied
        '404':
          description: Task not found
        '405':
          description: Validation exception
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  /tasks/daily:
    get:
      tags:
        - tasks
      summary: Get user's daily task summary for the current date
      description: pending desc.
      operationId: findTasksByUserId
      parameters:
        - name: userId
          in: query
          description: User id to filter by
          required: true
          explode: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TaskTime'          
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TaskTime'
        '400':
          description: Invalid userId
      security:
        - petstore_auth:
            - write:pets
            - read:pets
    post:
      tags:
        - tasks
      summary: Update a task's tracking time
      operationId: addTaskTime
      parameters:
        - name: userId
          in: query
          description: User id belonging to the task
          required: true
          explode: true
          schema:
            type: string
        - name: taskId
          in: query
          description: Task id to update
          required: true
          explode: true
          schema:
            type: number
        - name: timespent
          in: query
          description: Amount of time in seconds logged
          required: true
          explode: true
          schema:
            type: number
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Task'
        '405':
          description: Invalid input
      security:
        - petstore_auth:
            - write:pets
            - read:pets    
  /tasks/daily/date:
    get:
      tags:
        - tasks
      summary: Get user's daily task summary for a specified date
      description: pending desc.
      operationId: findTasksByUserIdDailyDate
      parameters:
        - name: userId
          in: query
          description: User id to filter by
          required: true
          explode: true
          schema:
            type: string
        - name: date
          in: query
          description: Specified date in milliseconds since Jan 1 1970
          required: true
          explode: true
          schema:
            type: number
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TaskTime'          
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TaskTime'
        '400':
          description: Invalid userId
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
  /user/{username}/{password}:
    get:
      tags:
        - user
      summary: Returns the users with the matching username and password
      operationId: usernamepassword
      parameters:
        - name: username
          in: path
          description: The user name for login
          required: true
          schema:
            type: string      
        - name: password
          in: path
          description: The password for login
          required: true
          schema:
            type: string      
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'          
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        default:
          description: successful operation
  /user/{username}:
    get:
      tags:
        - user
      summary: Returns the users with the matching username
      operationId: username
      parameters:
        - name: username
          in: path
          description: The user name for login
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array        
                items: 
                  $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        default:
          description: successful operation          
  /aboutme/{username}:
    get:
      tags:
        - user
      summary: Get a user's about me
      description: ''
      operationId: aboutmeusername
      parameters:
        - name: username
          in: path
          description: The user name for login
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        '400':
          description: Invalid username supplied
    put:
      tags:
        - user
      summary: Creates a user's about me content
      description: ''
      parameters:
          - name: username
            in: path
            description: The user name for login
            required: true
            schema:
              type: string
      operationId: aboutmeusernameput
      responses:
        default:
          description: successful operation
  /answers/{postId}:
    post:
      tags:
        - answers
      summary: Create an answer
      description: Create an answer for a post
      operationId: createAnswer
      parameters:
        - name: postId
          in: path
          description: The parent post's mongoDB _id
          required: true
          schema:
            type: string
      requestBody:
        description: This can only be done by a logged in user on a page for viewing a forum thread
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Answer'
          application/xml:
            schema:
              $ref: '#/components/schemas/Answer'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Answer'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Answer'
            application/xml:
              schema:
                $ref: '#/components/schemas/Answer'
        '409':
          description: Content not filled
    get:
      tags:
        - answers
      summary: Get the answers to a post
      description: ''
      operationId: postId
      parameters:
        - name: postId
          in: path
          description: The post's mongoDB _id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Answer'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Answer'

        '400':
          description: Invalid username supplied             
  /forumPosts/{postId}:
    get:
      tags:
        - posts
      summary: Get a post by its db id
      description: ''
      operationId: postIdgetpost
      parameters:
        - name: postId
          in: path
          description: The post's mongoDB _id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Post'
            application/json:
              schema:
                type: string
        '409':
          description: Server error
    delete:
      tags:
        - posts
      summary: Delete a post
      description: Delete a post from database
      operationId: getPost
      parameters:
        - name: postId
          in: path
          description: The post's mongoDB _id
          required: true
          schema:
            type: string      
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
            application/xml:
              schema:
                $ref: '#/components/schemas/Post'
        '409':
          description: Error getting data from database          
  /forumPosts/post:
    post:
      tags:
        - posts
      summary: Create a post
      description: This can only be done 
      operationId: createPost
      requestBody:
        description: This can only be done by a logged in user on a page for making new posts
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post'
          application/xml:
            schema:
              $ref: '#/components/schemas/Post'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Post'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
            application/xml:
              schema:
                $ref: '#/components/schemas/Post'
        '409':
          description: Title and/or content not filled
    get:
      tags:
        - posts
      summary: Get posts
      description: Get posts from database
      operationId: getPost
      parameters: []
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
            application/xml:
              schema:
                $ref: '#/components/schemas/Post'
        '409':
          description: Error getting data from database
  /answers:
    get:
      tags:
        - answers
      summary: Get post answers by a specific query
      description: Get posts from database
      operationId: getAnswersFromQuery
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'
        '409':
          description: Error getting data from database
  /comment:
    post:
      tags:
        - comments
      summary: Create a comment
      description: This can only be done 
      operationId: createCommentPost
      requestBody:
        description: The new comment to post
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
          application/xml:
            schema:
              $ref: '#/components/schemas/Comment'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Comment'
      responses:
          default:
            description: successful operation
          '409':
            description: Error getting data from database  
  /comment/{answerId}:
    get:
      tags:
        - comments
      summary: Get comments
      description: Get comments of a specfic answer post
      operationId: getComment
      parameters:
        - name: answerId
          in: path
          description: The answer's mongoDB id
          required: true
          schema:
            type: string
      responses:
        default:
          description: successful operation
        '409':
          description: Error getting data from database  
  /notifications:
    get:
      tags:
        - notifications
      summary: Get notifications based on queries
      description: ''
      operationId: notifget
      parameters:
        - name: name
          in: query
          description: Queries to filter notifications by
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Notification'
            application/json:
              schema:
                type: array
                items: 
                  $ref: '#/components/schemas/Notification'
        '409':
          description: Server error    
    post:
      tags:
        - notifications
      summary: Create a new notifications
      operationId: notifpost
      requestBody:
        description: The new notifications to post
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Notification'
          application/xml:
            schema:
              $ref: '#/components/schemas/Notification'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Notification' 
      responses:
        default:
          description: successful operation
        '409':
          description: Error getting data from database            
  /notifications/read:            
    post:
      tags:
        - notifications
      summary: Mark a notification as read
      operationId: notifpostread
      parameters:
        - name: notificationId
          in: query
          description: The notif's mongoDB _id
          required: true
          schema:
            type: string
      responses:
        default:
          description: successful operation
        '409':
          description: Error getting data from database          
components:
  schemas:
    Task:
      type: object
      required:
        - title
        - userId
      properties:
        id:
          type: string
          format: int64
          example: '10'
        title:
          type: string
          example: Read chapter 1 of textbook
        deadline:
          type: string
          description: String representing the date of the task's deadline
          example: 2022-09-05T00:00:00.000+00:00
        timespent:
          type: number
          description: The amount of time user has tracked the task using the study timer 
          example: 1500
        userId:
          type: string
        done:
          type: boolean
      xml:
        name: task
    TaskTime:
      type: object
      required:
        - taskId
        - userId
        - date
        - timespent
      properties:
        id:
          type: string
          format: int64
          example: '10'
        taskId:
          type: string
          description: The task's _id
          example: '111111'
        userId:
          type: string
          description: The user's _id
          example: '333333'
        timespent:
          type: number
          description: The amount of time user has tracked the task in seconds using the study timer during specified date
          example: 1500
        date:
          type: string
          description: The date of which the task was tracked 
          example: 'October 2 2022'
      xml:
        name: task
    User:
      type: object
      required:
        - username
        - password
      properties:
        id:
          type: integer
          format: int64
          example: 100000
        username:
          type: string
          example: catherine
        password:
          type: string
      xml:
        name: user
    Post:
      type: object
      required:
        - title
        - content
        - created_by
        - tags
        - created_At
        - nLikes
      properties:
        title:
          type: string
          example: How to multiply?
        content:
          type: string
          example: What are fast ways to multiply?
        created_by:
          type: string
          example: Catherine
        tags:
          type: string
          example: "Computer Science"
        created_At:
          type: string
          example: "07_10_2022"
        nLikes:
          type: number
          example: 0
    Answer:
      type: object
      required:
        - title
        - content
        - created_by
        - tags
        - created_At
        - nLikes
      properties:
        content:
          type: string
          example: You can try using recursion
        created_by:
          type: string
          example: Catherine
        child_of:
          type: string
          example: "634b447487873860a7fdff48"
        created_At:
          type: string
          example: "07_10_2022"
        nLikes:
          type: number
          example: 0
        comments: 
          type: array
          items:
            type: string
          example: []
      xml:
        name: user
    Comment:
      type: object
      required:
        - content
        - created_by
        - comment_of
        - created_At
        - nLikes
      properties:
        content:
          type: string
          example: You can try using recursion
        created_by:
          type: string
          example: Catherine
        created_At:
          type: string
          example: "07_10_2022"
        nLikes:
          type: number
          example: 0
        comment_of: 
          type: string
          example: '634b447487873860a7fdff48'
    Notification:
      type: object
      required:
        - source
        - sourceTitle
        - sourceAuthor
        - type
        - toUserId
        - read
      properties:
        source:
          type: string
          example: '634b447487873860a7fdff48'
        sourceTitle:
          type: string
          example: 'How many days in a week?'
        sourceAuthor:
          type: string
          example: Catherine
        type:
          type: string
          example: comment
        toUserId: 
          type: string
          example: '634b447487873860a7fdff48'  
        read: 
          type: boolean
          example: true      
      xml:
        name: user      
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: '##default'
  requestBodies:
    Task:
      description: Task object that needs to be added to the schedule
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Task'
        application/xml:
          schema:
            $ref: '#/components/schemas/Task'
    User:
      description:  user object
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Task'
  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://petstore3.swagger.io/oauth/authorize
          scopes:
            write:pets: modify pets in your account
            read:pets: read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header