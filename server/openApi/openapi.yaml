openapi: 3.0.3
info:
  title: NoStruggle - OpenAPI 3.0
  description: |-
   NoStruggle - Helping you along your computer science journey
    
    Some useful links:
    - [The NoStruggle repository](https://github.com/UTSCCSCC01/finalprojectf22-nostruggle)
    - [The source AP definition for NoStruggle (coming-soon)](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
  termsOfService: coming-soon.com
  contact:
    email: coming-soon@gmail.com
  license:
    name: n/a
    url: coming-soon.com
  version: 1.0.0
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: https://localhost:2800/api/v1
tags:
  - name: tasks
    description: Add tasks to your todolist
    externalDocs:
      description: Find out more
      url: http://swagger.io
  - name: user
    description: Operations about user
paths:
  /tasks:
    patch:
      tags:
        - tasks
      summary: Update an existing task
      description: Update an existing task in a schedule
      operationId: updatePet
      requestBody:
        description: Update an existing task in a schedule
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Task'
          application/xml:
            schema:
              $ref: '#/components/schemas/Task'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Task'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Task'
        '400':
          description: Invalid ID supplied
        '404':
          description: Task not found
        '405':
          description: Validation exception
      security:
        - petstore_auth:
            - write:pets
            - read:pets
    post:
      tags:
        - tasks
      summary: Add a new task to user's schedule
      description: post a new task to user's schedule
      operationId: addTask
      requestBody:
        description: Create a new task
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Task'
          application/xml:
            schema:
              $ref: '#/components/schemas/Task'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Task'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Task'
        '405':
          description: Invalid input
      security:
        - petstore_auth:
            - write:pets
            - read:pets
    get:
      tags:
        - tasks
      summary: Finds Tasks 
      description: Multiple status values can be provided with comma separated strings
      operationId: findTasks
      parameters:
        - name: filters
          in: query
          description: Attributes of the tasks to filter by
          required: false
          explode: true
          schema:
            type: object
            default: {}
            example: { userId: '10', done: true }
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'          
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'
        '400':
          description: Invalid filter keys
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  /tasks/{userId}:
    get:
      tags:
        - tasks
      summary: Finds tasks by user id
      description: pending desc.
      operationId: findTasksByUserId
      parameters:
        - name: userId
          in: path
          description: User id to filter by
          required: true
          explode: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'          
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'
        '400':
          description: Invalid userId
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
  /user/createWithList:
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      description: Creates list of users with given input array
      operationId: createUsersWithListInput
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'          
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        default:
          description: successful operation
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      description: ''
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: false
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      description: ''
      operationId: logoutUser
      parameters: []
      responses:
        default:
          description: successful operation
  /user/{username}:
    get:
      tags:
        - user
      summary: Get user by user name
      description: ''
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'          
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    put:
      tags:
        - user
      summary: Update user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: name that need to be deleted
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
components:
  schemas:
    Task:
      type: object
      required:
        - title
        - userId
      properties:
        id:
          type: string
          format: int64
          example: '10'
        title:
          type: string
          example: Read chapter 1 of textbook
        deadline:
          type: string
          description: String representing the date of the task's deadline
          example: 2022-09-05T00:00:00.000+00:00
        timespent:
          type: number
          description: The amount of time user has tracked the task using the study timer 
          example: 1500
        userId:
          type: string
        done:
          type: boolean
      xml:
        name: task
    User:
      type: object
      required:
        - username
        - password
      properties:
        id:
          type: integer
          format: int64
          example: 100000
        username:
          type: string
          example: catherine
        password:
          type: string
      xml:
        name: user
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: '##default'
  requestBodies:
    Task:
      description: Task object that needs to be added to the schedule
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Task'
        application/xml:
          schema:
            $ref: '#/components/schemas/Task'
    User:
      description:  user object
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Task'
  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://petstore3.swagger.io/oauth/authorize
          scopes:
            write:pets: modify pets in your account
            read:pets: read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header